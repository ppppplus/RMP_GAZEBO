<launch>
  <arg name="model" default="waffle_pi" doc="model type [burger, waffle, waffle_pi]"/>
  <arg name="slam_methods" default="gmapping" doc="slam type [gmapping, cartographer, hector, karto, frontier_exploration]"/>
  <arg name="move_forward_only" default="false"/>
  <arg name="configuration_basename" default="turtlebot3_lds_2d.lua"/>
<!-- turtle bot declation -->
  <arg name='first_robot' default="RMP_1"/>
  <arg name="first_robot_x_pos" default=" 0.5"/>
  <arg name="first_robot_y_pos" default=" 0.0"/>
  <arg name="first_robot_z_pos" default=" 0.0"/>
  <arg name="first_robot_yaw"   default=" 0.0"/>

<!-- launch gazebos from the data -->
<include file="$(find gazebo_ros)/launch/empty_world.launch">
  <arg name="world_name" value="$(find ros_multitb3)/worlds/simple.world"/>
  <!-- <arg name="world_name" value="$(find ros_multitb3)/worlds/turtlebot3_house_mod.world"/> -->
  <arg name="paused" value="false"/>
  <arg name="use_sim_time" value="true"/>
  <arg name="gui" value="true"/>
  <arg name="headless" value="false"/>
  <arg name="debug" value="false"/>
</include>  

<!-- spawn the robots and related information -->
<group ns = "/$(arg first_robot)">
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
    <param name="publish_frequency" type="double" value="100.0" />
    <param name="use_tf_static" type="bool" value="false" />
    <param name="tf_prefix" value="$(arg first_robot)" />
  </node>
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg first_robot) -x $(arg first_robot_x_pos) -y $(arg first_robot_y_pos) -z $(arg first_robot_z_pos) -Y $(arg first_robot_yaw) -param robot_description" />
  <!-- include gmapping for the first turtle bot -->
  <include file="$(find turtlebot3_slam)/launch/turtlebot3_$(arg slam_methods).launch">
    <arg name="set_base_frame" value="$(arg first_robot)/base_footprint"/>
    <arg name="set_odom_frame" value="$(arg first_robot)/odom"/>
    <arg name="set_map_frame" value="$(arg first_robot)/map"/>
    <arg name="configuration_basename" value="$(arg configuration_basename)"/>
  </include>
  <!-- include move base for the first turtle bot -->
  <include file="$(find ros_multitb3)/launch/includes/rmp_move_base.launch">
    <arg name="model" value="$(arg model)" />
    <arg name="move_forward_only" value="$(arg move_forward_only)"/>
    <arg name="cmd_vel_topic" value="/$(arg first_robot)/cmd_vel"/>
    <arg name="namespace" value="$(arg first_robot)"/>
  </include>
  <!-- include amcl for the first turtle bot -->
  <!-- <include file="$(find ros_multitb3)/launch/includes/amcl.launch">
    <arg name="scan_topic" value="$(arg first_robot)/scan"/>
    <arg name="global_frame_id" value="$(arg first_robot)/map"/>
    <arg name="base_frame_id" value="$(arg first_robot)/base_footprint"/>
    <arg name="odom_frame_id" value="$(arg first_robot)/odom"/>
  </include> -->

</group>


<node pkg="tf" type="static_transform_publisher" name="world_to_$(arg first_robot)_tf_broadcaster"  args="0 0 0 0 0 0 /map /$(arg first_robot)/map 100"/>

<!-- rviz -->
  <node pkg="rviz" type="rviz" name="rviz" required="true"
        args="-d $(find ros_multitb3)/rviz/single_rmp_gmapping.rviz">
  <remap from="/move_base_simple/goal" to="/$(arg first_robot)/move_base_simple/goal"/>
  </node>
</launch>
